/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package javaap.modal;

import java.awt.Color;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.text.SimpleDateFormat;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Calendar;
import java.util.List;
import javaapp.bean.CommandeC;
import javaapp.bean.CommandeDetail;
import javaapp.bean.Livraison;
import javaapp.bean.LivraisonDetail;
import javaapp.bean.MouvementStock;
import javaapp.component.FormatUtils;
import javaapp.component.ModalActionEvent;
import javaapp.component.Toast;
import javaapp.dao.CommandeCDAO;
import javaapp.dao.CommandeDetailDAO;
import javaapp.dao.CommandeDetailDAOImpl;
import javaapp.dao.FactureDAO;
import javaapp.dao.LivraisonDAO;
import javaapp.dao.LivraisonDetailDAO;
import javaapp.dao.MouvementStockDAO;
import javaapp.dao.ProduitDAO;
import javaapp.factory.DAOFactory;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JSpinner;
import javax.swing.JTextField;
import javax.swing.SpinnerNumberModel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author ZOENIRINA
 */
public class ModalValidationLivraison extends javax.swing.JFrame {
    private FormatUtils formater = new FormatUtils();
    int idCommSelected = 0;
    private MouvementStockDAO mouvementDAO;
    private LivraisonDAO livDAO;
    private ProduitDAO produitDAO;
    private CommandeCDAO commandeDAO;
    private CommandeDetailDAOImpl commDetImplDAO;
    private CommandeDetailDAO commDetDAO;
    private LivraisonDetailDAO livDetDAO;
    private FactureDAO facDAO;
    private Livraison livSelected;
    
    public ModalValidationLivraison(Livraison livraison) {
        initComponents();
        mouvementDAO =  DAOFactory.getMouvementStockDAO();
        livDAO = DAOFactory.getLivraisonDAO();
        livDetDAO = DAOFactory.getLivraisonDetailDAO();
        produitDAO = DAOFactory.getProduitDAO();
        commandeDAO = DAOFactory.getCommandeDAO();
        commDetImplDAO = DAOFactory.getCommandeDetailDAOImpl();
        commDetDAO = DAOFactory.getCommandeDetailDAO();
        facDAO = DAOFactory.getFactureDAO();
        livSelected = livraison;
        populateFields(livraison);
        jScrollPane3.getViewport().setBackground(Color.WHITE);
    }
    
    public ModalValidationLivraison() {
        initComponents();
    }

    private void populateFields(Livraison livraison) {

//        String[] column = {"Article","Réference","PU HT", "TVA (%)","Remise",  "Qté commandé", "Qté à expédier","Total HT", "Entrepôt"};
   
        DefaultTableModel model = ( DefaultTableModel) listCommande.getModel();  
            List <LivraisonDetail> livDets = DAOFactory.getLivraisonDetailDAO().select(livraison.getId());
            for( LivraisonDetail livDet : livDets){
            model.addRow(new Object[] {
                livDet.getId(),
                livDet.getProduit().getDesignation(),
                livDet.getProduit().getRefProduit(),
                livDet.getCommandeDetail().getQuantite(),
                commDetImplDAO.findById(livDet.getIdCommandeDetail()).getQuantiteLivree(),
                livDet.getQuantiteRecu(),
                0
            });
           }
        listCommande.setModel(model);
        
    }
    private boolean modifierLivraisonDetail(){
        
        for(int i = listCommande.getRowCount()-1 ; i >= 0; i--){
            int idLivraisonDet = Integer.parseInt(listCommande.getModel().getValueAt(i, 0).toString());
            int qteValide =Integer.parseInt(listCommande.getModel().getValueAt(i, 6).toString());
            LivraisonDetail livDet = livDetDAO.find(idLivraisonDet);
            livDet.setQuantiteValide(qteValide);
            livDetDAO.update(livDet);
            
             javaapp.bean.MouvementStock mouvementStock = mouvementDAO.findOUT( livDet.getId() );
                    mouvementStock.setQuantite(qteValide);
                    mouvementStock.setEstValide("Oui");
                    if (mouvementDAO.updateOUT(mouvementStock)) {
                        this.dispose();
                    }
        }
        return false;
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel17 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        listCommande = new javaapp.component.Table();
        modifier_ligne = new javaapp.component.ButtonRadius();
        supprimer_ligne = new javaapp.component.ButtonRadius();
        btn_create_BL = new javaapp.component.ButtonRadius();
        jPanel5 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Validation d'un bon de livraison");
        setBackground(new java.awt.Color(255, 255, 255));

        jScrollPane2.setBorder(null);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jLabel17.setFont(new java.awt.Font("Verdana", 1, 16)); // NOI18N
        jLabel17.setForeground(new java.awt.Color(51, 51, 255));
        jLabel17.setText("Ligne du bon de réception");

        jScrollPane3.setBackground(new java.awt.Color(255, 255, 255));
        jScrollPane3.setBorder(null);

        listCommande.setForeground(new java.awt.Color(51, 51, 51));
        listCommande.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "#", "Article", "Référence", "Qté commandée", "Qté déjà livrée", "Qté expédiée", "Qté validé"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        listCommande.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        jScrollPane3.setViewportView(listCommande);
        if (listCommande.getColumnModel().getColumnCount() > 0) {
            listCommande.getColumnModel().getColumn(6).setPreferredWidth(20);
        }

        modifier_ligne.setBackground(new java.awt.Color(102, 102, 255));
        modifier_ligne.setBorder(null);
        modifier_ligne.setIcon(new javax.swing.ImageIcon(getClass().getResource("/javaapp/icon/iconModify.png"))); // NOI18N
        modifier_ligne.setBorderColor(new java.awt.Color(102, 102, 255));
        modifier_ligne.setColor(new java.awt.Color(102, 102, 255));
        modifier_ligne.setColorClick(new java.awt.Color(153, 153, 255));
        modifier_ligne.setColorOver(new java.awt.Color(51, 51, 255));
        modifier_ligne.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modifier_ligneActionPerformed(evt);
            }
        });

        supprimer_ligne.setBackground(new java.awt.Color(255, 204, 204));
        supprimer_ligne.setBorder(null);
        supprimer_ligne.setIcon(new javax.swing.ImageIcon(getClass().getResource("/javaapp/icon/btnDelete.png"))); // NOI18N
        supprimer_ligne.setBorderColor(new java.awt.Color(255, 204, 204));
        supprimer_ligne.setColor(new java.awt.Color(255, 204, 204));
        supprimer_ligne.setColorClick(new java.awt.Color(255, 204, 204));
        supprimer_ligne.setColorOver(new java.awt.Color(255, 142, 142));
        supprimer_ligne.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                supprimer_ligneActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(53, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel17)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 712, Short.MAX_VALUE)
                        .addComponent(modifier_ligne, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(supprimer_ligne, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 1023, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(38, 38, 38))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(modifier_ligne, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(supprimer_ligne, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40))
        );

        jScrollPane2.setViewportView(jPanel1);

        btn_create_BL.setBackground(new java.awt.Color(102, 102, 255));
        btn_create_BL.setBorder(null);
        btn_create_BL.setForeground(new java.awt.Color(255, 255, 255));
        btn_create_BL.setText("Valider");
        btn_create_BL.setBorderColor(new java.awt.Color(102, 102, 255));
        btn_create_BL.setColor(new java.awt.Color(102, 102, 255));
        btn_create_BL.setColorClick(new java.awt.Color(255, 255, 255));
        btn_create_BL.setColorOver(new java.awt.Color(94, 94, 237));
        btn_create_BL.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        btn_create_BL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_create_BLActionPerformed(evt);
            }
        });

        jPanel5.setBackground(new java.awt.Color(102, 102, 255));
        jPanel5.setPreferredSize(new java.awt.Dimension(0, 3));

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 3, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 1124, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btn_create_BL, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(60, 60, 60))
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 1124, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 322, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btn_create_BL, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void modifier_ligneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modifier_ligneActionPerformed
        JFrame frame = new JFrame("Gestion des Commandes");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(800, 400);
        int selectedRow = listCommande.getSelectedRow();
        DefaultTableModel tableModel = (DefaultTableModel) listCommande.getModel();
        if (selectedRow != -1) {
            String refProduit = (String) tableModel.getValueAt(selectedRow, 1);
            int quantiteCommandee = (int) tableModel.getValueAt(selectedRow, 3);
            int quantiteExpediee = (int) tableModel.getValueAt(selectedRow, 5);

            // Formulaire de modification
            JTextField refProduitField = new JTextField(refProduit);
            JTextField qteCommandee = new JTextField(String.valueOf(quantiteCommandee));
            JTextField qteExpediee = new JTextField(String.valueOf(quantiteExpediee));
            
            JSpinner qteValide = new JSpinner(new SpinnerNumberModel(0, 0, 100, 1));
            qteExpediee.setEditable(false);
            qteCommandee.setEditable(false);
            refProduitField.setEditable(false);

            JPanel panel = new JPanel(new GridLayout(0, 1));
            panel.add(new JLabel("Référence Produit:"));
            panel.add(refProduitField);
            panel.add(new JLabel("Quantité commandée:"));
            panel.add(qteCommandee);
            panel.add(new JLabel("Quantité Expédiée:"));
            panel.add(qteExpediee);
            panel.add(new JLabel("Quantité validée:"));
            panel.add(qteValide);
            
            int result = JOptionPane.showConfirmDialog(frame, panel, "Modifier Commande", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);
            if (result == JOptionPane.OK_OPTION) {
                tableModel.setValueAt((int) qteValide.getValue(), selectedRow, 6);
            }               
        } else {
            JOptionPane.showMessageDialog(frame, "Veuillez sélectionner une ligne à modifier.", "Erreur", JOptionPane.ERROR_MESSAGE);
        } 
        listCommande.clearSelection();
    }//GEN-LAST:event_modifier_ligneActionPerformed
    
    private void supprimer_ligneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_supprimer_ligneActionPerformed
        JFrame frame = new JFrame("Gestion des Commandes");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(800, 400);
        int selectedRow = listCommande.getSelectedRow();
        if (selectedRow != -1) {
            if(JOptionPane.showConfirmDialog(frame, "Etes-vous sûr de vouloir supprimer cette ligne, cette action est irreversible?","Confirmation de suppression",JOptionPane.YES_NO_OPTION) == 0){
            LivraisonDetail livDetSelected = livDetDAO.find(Integer.parseInt(listCommande.getModel().getValueAt(selectedRow, 0).toString()));
            if( livDetDAO.delete(livDetSelected) ){
                ((DefaultTableModel) listCommande.getModel()).removeRow(selectedRow);
                new Toast("Ligne supprimée!", this.getLocationOnScreen().x+this.getWidth()-320, this.getLocationOnScreen().y+7).showtoast();
            }
        }
        } else {
            JOptionPane.showMessageDialog(frame, "Veuillez sélectionner une ligne à supprimer.", "Erreur", JOptionPane.ERROR_MESSAGE);
        }
        listCommande.clearSelection();
    }//GEN-LAST:event_supprimer_ligneActionPerformed

    private void btn_create_BLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_create_BLActionPerformed
        boolean vide = false;
        for(int i = listCommande.getRowCount()-1 ; i >= 0; i--){
            if(Integer.parseInt(listCommande.getModel().getValueAt(i, 6).toString()) == 0 ){
                vide= true;
                JOptionPane.showMessageDialog(null, "Veuillez indiquer la quantité validé", "Message", JOptionPane.ERROR_MESSAGE);
                break;
            }
        }
        if(!vide){
            livSelected.setStatus("Validée");
            if(livDAO.update(livSelected)) modifierLivraisonDetail();
            this.dispose();
        }
        
    }//GEN-LAST:event_btn_create_BLActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ModalValidationLivraison.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ModalValidationLivraison.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ModalValidationLivraison.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ModalValidationLivraison.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ModalValidationLivraison().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javaapp.component.ButtonRadius btn_create_BL;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javaapp.component.Table listCommande;
    private javaapp.component.ButtonRadius modifier_ligne;
    private javaapp.component.ButtonRadius supprimer_ligne;
    // End of variables declaration//GEN-END:variables

    public void insererMouvementStock(int idProduit, int quantite, int idMagasin, int generatedKey, String valide) {
        DateTimeFormatter dtFormat = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
        LocalDateTime now = LocalDateTime.now();
        MouvementStock mouvement = new MouvementStock();
        mouvement.setDescription("Expédition du produit "+idProduit);
        mouvement.setIdProduit(idProduit);
        mouvement.setQuantite(quantite);
        mouvement.setDateMouvement(now.format(dtFormat));
        mouvement.setIdMagasin(idMagasin);
        mouvement.setIdSourceSortie(generatedKey);
        mouvement.setEstValide(valide);
        mouvementDAO.createOUT(mouvement);
        
    }

    public void initEvent(ModalActionEvent event, int l) {
        btn_create_BL.addActionListener(new ActionListener(){
        @Override
        public void actionPerformed(ActionEvent ae) {
            boolean vide = false;
        for(int i = listCommande.getRowCount()-1 ; i >= 0; i--){
            if(Integer.parseInt(listCommande.getModel().getValueAt(i, 6).toString()) == 0 ){
                vide= true;
                JOptionPane.showMessageDialog(null, "Veuillez indiquer la quantité validé", "Message", JOptionPane.ERROR_MESSAGE);
                break;
            }
        }
        if(!vide){
            livSelected.setStatus("Validée");
            if(livDAO.update(livSelected)) modifierLivraisonDetail();
            setVisible(false);
            event.onEdit(l);
            dispose();
        }
        }});
        
    }


}
